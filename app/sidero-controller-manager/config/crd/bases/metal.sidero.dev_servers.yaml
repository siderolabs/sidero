
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.5.0
  creationTimestamp: null
  name: servers.metal.sidero.dev
spec:
  group: metal.sidero.dev
  names:
    kind: Server
    listKind: ServerList
    plural: servers
    singular: server
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - description: server hostname
      jsonPath: .spec.hostname
      name: Hostname
      type: string
    - description: indicates if the server is accepted
      jsonPath: .spec.accepted
      name: Accepted
      type: boolean
    - description: indicates that the server has been allocated
      jsonPath: .status.inUse
      name: Allocated
      type: boolean
    - description: indicates if the server is clean or not
      jsonPath: .status.isClean
      name: Clean
      type: boolean
    - description: display the current power status
      jsonPath: .status.power
      name: Power
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Server is the Schema for the servers API.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ServerSpec defines the desired state of Server.
            properties:
              accepted:
                type: boolean
              bmc:
                description: BMC defines data about how to talk to the node via ipmitool.
                properties:
                  endpoint:
                    description: BMC endpoint.
                    type: string
                  interface:
                    description: BMC Interface Type. Defaults to lanplus.
                    type: string
                  pass:
                    description: BMC password value.
                    type: string
                  passFrom:
                    description: Source for the password value. Cannot be used if Pass is not empty.
                    properties:
                      secretKeyRef:
                        description: SecretKeyRef defines a ref to a given key within a secret.
                        properties:
                          key:
                            description: Key to select
                            type: string
                          name:
                            type: string
                          namespace:
                            description: 'Namespace and name of credential secret nb: can''t use namespacedname here b/c it doesn''t have json tags in the struct :('
                            type: string
                        required:
                        - key
                        - name
                        - namespace
                        type: object
                    type: object
                  user:
                    description: BMC user value.
                    type: string
                  userFrom:
                    description: Source for the user value. Cannot be used if User is not empty.
                    properties:
                      secretKeyRef:
                        description: SecretKeyRef defines a ref to a given key within a secret.
                        properties:
                          key:
                            description: Key to select
                            type: string
                          name:
                            type: string
                          namespace:
                            description: 'Namespace and name of credential secret nb: can''t use namespacedname here b/c it doesn''t have json tags in the struct :('
                            type: string
                        required:
                        - key
                        - name
                        - namespace
                        type: object
                    type: object
                required:
                - endpoint
                type: object
              configPatches:
                items:
                  properties:
                    op:
                      type: string
                    path:
                      type: string
                    value:
                      x-kubernetes-preserve-unknown-fields: true
                  required:
                  - op
                  - path
                  type: object
                type: array
              cpu:
                properties:
                  manufacturer:
                    type: string
                  version:
                    type: string
                type: object
              environmentRef:
                description: 'ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don''t make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .'
                properties:
                  apiVersion:
                    description: API version of the referent.
                    type: string
                  fieldPath:
                    description: 'If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.'
                    type: string
                  kind:
                    description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                    type: string
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                    type: string
                  namespace:
                    description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                    type: string
                  resourceVersion:
                    description: 'Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                    type: string
                  uid:
                    description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                    type: string
                type: object
              hostname:
                type: string
              managementApi:
                description: ManagementAPI defines data about how to talk to the node via simple HTTP API.
                properties:
                  endpoint:
                    type: string
                required:
                - endpoint
                type: object
              pxeBootAlways:
                type: boolean
              system:
                properties:
                  family:
                    type: string
                  manufacturer:
                    type: string
                  productName:
                    type: string
                  serialNumber:
                    type: string
                  skuNumber:
                    type: string
                  version:
                    type: string
                type: object
            required:
            - accepted
            type: object
          status:
            description: ServerStatus defines the observed state of Server.
            properties:
              addresses:
                description: Addresses lists discovered node IPs.
                items:
                  description: NodeAddress contains information for the node's address.
                  properties:
                    address:
                      description: The node address.
                      type: string
                    type:
                      description: Node address type, one of Hostname, ExternalIP or InternalIP.
                      type: string
                  required:
                  - address
                  - type
                  type: object
                type: array
              conditions:
                description: Conditions defines current service state of the Server.
                items:
                  description: Condition defines an observation of a Cluster API resource operational state.
                  properties:
                    lastTransitionTime:
                      description: Last time the condition transitioned from one status to another. This should be when the underlying condition changed. If that is not known, then using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: A human readable message indicating details about the transition. This field may be empty.
                      type: string
                    reason:
                      description: The reason for the condition's last transition in CamelCase. The specific API may choose whether or not this field is considered a guaranteed API. This field may not be empty.
                      type: string
                    severity:
                      description: Severity provides an explicit classification of Reason code, so the users or machines can immediately understand the current situation and act accordingly. The Severity field MUST be set only when Status=False.
                      type: string
                    status:
                      description: Status of the condition, one of True, False, Unknown.
                      type: string
                    type:
                      description: Type of condition in CamelCase or in foo.example.com/CamelCase. Many .condition.type values are consistent across resources like Available, but because arbitrary conditions can be useful (see .node.status.conditions), the ability to deconflict is important.
                      type: string
                  required:
                  - status
                  - type
                  type: object
                type: array
              inUse:
                description: InUse is true when server is assigned to some MetalMachine.
                type: boolean
              isClean:
                description: IsClean is true when server disks are wiped.
                type: boolean
              power:
                description: 'Power is the current power state of the server: "on", "off" or "unknown".'
                type: string
              ready:
                description: Ready is true when server is accepted and in use.
                type: boolean
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
